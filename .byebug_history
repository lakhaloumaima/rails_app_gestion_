continue
user.company
 User.find params[:id] 
continue
current_user
continue
@request.start_date
@request.end_date
@request.end_date.to_date - @request.start_date.to_date
(@request.end_date.to_date - @request.start_date.to_date).to_i
(@request.end_date.to_date - @request.start_date.to_date).to_i + 1
@request
@request.update(days: days)
days
continue
users_with_avatars
users
continue
user.as_json.merge( avatar_url: user.avatar.attached? ? url_for(user.avatar) : nil )
continue
user.as_json.merge( avatar_url: user.avatar.attached? ? url_for(user.avatar) : nil )
   110:                 )
   109:                     avatar_url: user.avatar.attached? ? url_for(user.avatar) : nil
user.as_json.merge(
url_for(user.avatar)
user.avatar.attached?
continue
exit
post_params
@request
continue
 @employee
 @employee.save
exit
@employee.company.present?
 @employee
 @employee.save
@employee.solde
@employee = User.new(post_params1)
@employee.solde
continue
@user.errors.full_messages
@request.errors.full_messages
continue
@user.errors
@user.error.full_messages
@user.errors.full_messages
exit
@request.update(post_params3) && @user.first.update(solde: @result)
exit
@user.first.solde
@user.solde
@user
continue
@user.update_attribute(solde: @result)
@user.update(solde: @result)
@result = solde - request_days
@user.update(solde: result)@result = solde - request_days
@user.update(solde: result)
@request.update(post_params3) && @user.update(solde: result)
continue
@request.days
@user.save
@user.solde
@user
result
@request.update(post_params3)
@user.update(solde: result)
continue
@request
@user.update(:solde => result)
@request.update(post_params3)
result
request_days
solde
@user
continue
post_params3[:status] == "in_progress" || post_params3[:status] == "refused"
post_params3[:status]
@request
continue
ActionCable.server.broadcast('chat_channel', { message: @message })
continue
 ActionCable.server.broadcast( )
 ActionCable.server.broadcast('chat_channel' )
ActionCable
ActionCable.server
@message.receiver_id
ActionCable.server.broadcast('chat_channel', { message: @message, receiver_id: @message.receiver_id, sender_id: @message.sender_id })
continue
@message
ActionCable.server.broadcast('chat_channel', { message: @message })
@message.save
continue
ActionCable.server.broadcast('chat_channel', { message: @message })
continue
@message 
ActionCable.server.broadcast('chat_channel', { message: @message })
continue
user.send_reset_password
user = User.find_by_email(params[:email])
continue
user.send_reset_password
user = User.find_by_email(params[:email])
User.find_by_email(params[:email])
continue
exit
user.save
user
user.confirm_token = nil
user.email_confirmed = true
user
 user = User.find_by_confirm_token(params[:id])
user
User.find_by_confirm_token(params[:id])
exit
continue
exit
current_user
continue
_opts
current_user
_resource
exit
_resource
continue
params
exit
params
sign_up_params
continue
Company.create(name: params[:user][:name], subdomain: params[:user][:subdomain])
company
continue
params[:user][:name]
sign_up_params
continue
resource
resource.errors.full_messages
exit
resource.errors.full_messages
exit
resource.company_id = 1exit
resource.save
      byebug
resource
resource.company_id = 1
resource.update( company_id: '1' )
resource.update( company_id: 1 )
resource
exit
resource.errors.full_messages
resource.save
exit
resource.errors.full_messages
resource.save
continue
resource.save
continue
resource.save
continue
params
resource.save
resource.company_id
sign_up_params
continue
sign_up_params
resource.company_id
resource.save
exit
params
sign_up_params
resource.save
exit
resource.save
params
sign_up_params
resource.errors.full_messages
resource
resource.company
exit
Company.find_by(id: 1)
resource.company
resource.errors.full_messages
continue
resource.persisted?
resource
params
sign_up_params
continue
sign_up_params
params
continue
params
sign_up_params
continue
params
sign_up_params
continue
sign_up_params
params
exit
resource.persisted?
resource.save
 build_resource(sign_up_params)
sign_up_params
resource
resource.company
exit
@reasons[0].name
@reasons.name
@reasons
continue
paramsimageuser
@user.avatar.attach(io: File.open(Rails.root.join('public', 'logo2.jpeg')), filename: 'logo2.jpeg')
url_for( @user.avatar)
@user.avatar.attached?
@user.avatar
@user
exit
current_user.avatar.attached?
current_user.avatar
continue
rails_blob_path(current_user.avatar, disposition: "attachment")
url_for(current_user.avatar)
current_user.avatar.attached?
current_user.avatar
_resource
current_user
exit
current_user
resource
exit
rails_blob_path(@employee.avatar, disposition: "attachment")
@employee.avatar
exit
rails_blob_path(@employee.avatar, disposition: "attachment")
@employee.avatar
exit
request.user.email
request.user
request
exit
params[:file]
continue
count
exit
@messages
exit
@messages
continue
@message
current_user
@current_user
continue
@current_user
